package cn.wulin.plant.vs.zombie;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JWindow;

public class LoadSystemWaitting extends JPanel{
	private static LoadSystemWaitting loadSystemWaitting;
	private Image image;
	private JWindow jw;
	public static void main(String args[]){
		LoadSystemWaitting.getInstance(true);
	}
	public static void instanceInit(){
		if (loadSystemWaitting == null) {
			loadSystemWaitting = new LoadSystemWaitting();
		}
	}
	public static LoadSystemWaitting getInstance(boolean alwaysOnTop) {
		if (loadSystemWaitting == null) {
			loadSystemWaitting = new LoadSystemWaitting();
		}
		loadSystemWaitting.jw.setAlwaysOnTop(alwaysOnTop);
		loadSystemWaitting.setVisible(true);
		return loadSystemWaitting;
	}
 
	private JPanel getJPanel() {
		JPanel jp = new JPanel() {
 
			@Override
			protected void paintComponent(Graphics g) {
				super.paintComponent(g);
				g.drawImage(image, 0, 0, this);
			}
 
		};
		return jp;
	}
 
	public static void closeWindow() {
		if (loadSystemWaitting != null) {
			loadSystemWaitting.setVisible(false);
		}
	}
	public void setVisible(boolean b){
		jw.setVisible(b);
	}
 
 
	private LoadSystemWaitting() {
		image = Toolkit.getDefaultToolkit().createImage(loadImage("sunflower0.gif"));
		jw = new JWindow();
		jw.setSize(145, 15);
		jw.setLayout(new BorderLayout());
		jw.add(getJPanel(), BorderLayout.CENTER);
		jw.setLocationRelativeTo(null);
		
		JFrame frame = new JFrame();
		frame.add(jw);

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(300, 200);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	}
	
	// 加载img图片
		public static String loadImage(String fileName) {
			URL resource = Thread.currentThread().getContextClassLoader().getResource("images/" + fileName);
			System.out.println(resource.toString());
			return resource.toString();
		}
 
}
